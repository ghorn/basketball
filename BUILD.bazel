load("@rules_python//python:defs.bzl", "py_binary")

py_binary(
    name = "visualize",
    srcs = [
        "visualize.py",
        "bspline.py",
    ],
    main = "visualize.py",
    srcs_version = "PY3",
    python_version = "PY3",
    visibility = ["//visibility:public"],
)

copts = [
    "-Wall",
    "-Wextra",
    "-Werror",
    "-Wconversion",
    "-fdiagnostics-color=always",
    "-std=c++17",
]

cc_binary(
    name = "vis",
    srcs = [
        "assert.hpp",
        "main.cpp",
        "bspline.hpp",
        "camera.cpp",
        "camera.hpp",
        "gl_error.cpp",
        "gl_error.hpp",
        "opengl_context.cpp",
        "opengl_context.hpp",
        "problem/backboard.hpp",
        "problem/problem.hpp",
        "problem/shot.hpp",
        "problem/visualization.cpp",
        "problem/visualization.hpp",
        "shader/colorlines.cpp",
        "shader/colorlines.hpp",
        "shader/gridmesh.cpp",
        "shader/gridmesh.hpp",
        "shader/lines.cpp",
        "shader/lines.hpp",
        "shader/shader.cpp",
        "shader/shader.hpp",
    ],
    defines = [
        "BOOST_STACKTRACE_USE_BACKTRACE",
        #"BOOST_STACKTRACE_USE_ADDR2LINE",
        #"BOOST_STACKTRACE_LINK",
    ],
    linkopts = [
        "-ldl", "-lbacktrace", #"-lboost_stacktrace_backtrace",
        '-lglfw',
        '-lGLEW',
        '-lGL',
        '-lSOIL',
    ],
    copts = copts,
    data = [
        "image/awesomeface.png",
        "image/court.png",
        "image/warriors_court.png",
        "shader/colorlines.vs",
        "shader/colorlines.fs",
        "shader/gridmesh.vs",
        "shader/gridmesh.fs",
        "shader/lines.vs",
        "shader/lines.fs",
        ":sample.png",
        ":sample2.png",
    ],
)

py_binary(
    name = "geometry",
    srcs = [
        "problem/geometry.py",
    ],
    main = "problem/geometry.py",
    srcs_version = "PY3",
    python_version = "PY3",
    visibility = ["//visibility:public"],
)
